name: üöÄ Provisioning VM from External Project

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: "VM Name"
        required: true
        default: "devops-vm"

      vm_memory:
        description: "Memory (MB)"
        required: true
        default: "8192"
        type: choice
        options:
          - "1024"
          - "2048"
          - "4096"
          - "6144"
          - "8192"

      vm_cpus:
        description: "Number of CPUs"
        required: true
        default: "4"
        type: choice
        options:
          - "1"
          - "2"
          - "3"
          - "4"
          - "5"
          - "6"

      ip_mode:
        description: "IP Mode (dhcp or static)"
        required: true
        default: "dhcp"
        type: choice
        options:
          - dhcp
          - static

      ip_address:
        description: "Static IP (if IP Mode is static)"
        required: false

      project_repo:
        description: "GitHub repo to provision"
        required: true
        default: "vladbelo2/gameops-lab"
        type: choice
        options:
          - vladbelo2/gameops-lab
          - vladbelo2/kube-resilience-lab
          - vladbelo2/cloud-cost-simulator
          - custom
          
      custom_repo:
        description: "Enter custom GitHub repo (only if 'custom' is selected above)"
        required: false

jobs:
  spin-vm:
    name: üß± Spin VM for ${{ github.event.inputs.project_repo }}
    runs-on: [self-hosted, macos, X64]

    steps:
      - name: üìÅ Checkout Orchestrator Repo
        uses: actions/checkout@v4

      - name: üß™ Validate Custom Repo Input
        run: |
          if [[ "${{ github.event.inputs.project_repo }}" == "custom" && -z "${{ github.event.inputs.custom_repo }}" ]]; then
            echo "[ERROR] You selected 'custom' but did not provide a custom_repo."
            exit 1
          fi

      - name: üì¶ Clone External Project
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.project_repo == 'custom' && github.event.inputs.custom_repo || github.event.inputs.project_repo }}
          path: external/project

      - name: üîß Generate Vagrantfile
        run: |
          chmod +x scripts/build_vagrantfile.py
          python3 scripts/build_vagrantfile.py \
            --vm-name "${{ github.event.inputs.vm_name }}" \
            --vm-memory "${{ github.event.inputs.vm_memory }}" \
            --vm-cpus "${{ github.event.inputs.vm_cpus }}" \
            --ip-mode "${{ github.event.inputs.ip_mode }}" \
            --ip-address "${{ github.event.inputs.ip_address }}"

      - name: üîÑ Copy Project Files Into VM Dir
        run: |
          rsync -a --exclude 'Vagrantfile' external/project/ vms/${{ github.event.inputs.vm_name }}/

      - name: üßπ Destroy existing VMs that match name
        run: |
          echo "[INFO] üîç Checking for existing VMs matching '${{ github.event.inputs.vm_name }}'..."
          MATCHING_VMS=$(VBoxManage list vms | grep "\"${{ github.event.inputs.vm_name }}" | cut -d '"' -f2)

          if [[ -z "$MATCHING_VMS" ]]; then
            echo "[INFO] ‚úÖ No matching VMs found"
          else
            echo "[INFO] ‚ö†Ô∏è Found matching VMs:"
            echo "$MATCHING_VMS"

            echo "$MATCHING_VMS" | while read vm; do
              echo "[INFO] üß® Destroying VM: $vm"
              VBoxManage controlvm "$vm" poweroff || true
              VBoxManage unregistervm "$vm" --delete || true
            done
          fi

      - name: üß± vagrant up
        working-directory: ./vms/${{ github.event.inputs.vm_name }}
        run: |
          vagrant up
